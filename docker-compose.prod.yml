version: '3.8'

services:
  # Production API Service
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI}
      - AZURE_SUBSCRIPTION_ID=${AZURE_SUBSCRIPTION_ID}
      - AZURE_RESOURCE_GROUP=${AZURE_RESOURCE_GROUP}
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
      - AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET}
      - AZURE_TENANT_ID=${AZURE_TENANT_ID}
      - MODEL_PATH=/app/models/dynamic_pricing_model.pkl
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
    volumes:
      - ./models:/app/models:ro
      - ./logs:/app/logs
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - dynamic-pricing-prod

  # Production UI Service
  ui:
    build:
      context: ./ui
      dockerfile: Dockerfile
    ports:
      - "8501:8501"
    environment:
      - API_BASE_URL=http://api:8000
      - ENVIRONMENT=production
    depends_on:
      - api
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - dynamic-pricing-prod

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
      - ui
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      - dynamic-pricing-prod

  # Monitoring Agent
  monitoring:
    build:
      context: ./monitoring
      dockerfile: Dockerfile
    environment:
      - API_ENDPOINT=http://api:8000
      - CHECK_INTERVAL=60
      - ALERT_WEBHOOK=${ALERT_WEBHOOK_URL}
    depends_on:
      - api
    deploy:
      restart_policy:
        condition: on-failure
    volumes:
      - ./logs:/app/logs
    networks:
      - dynamic-pricing-prod

networks:
  dynamic-pricing-prod:
    driver: bridge
