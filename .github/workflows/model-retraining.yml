name: Model Retraining Pipeline - Azure App Services

on:
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      force_retrain:
        description: 'Force retraining regardless of triggers'
        required: false
        default: 'false'
        type: boolean
      data_source:
        description: 'Data source for retraining'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - manual_upload
  repository_dispatch:
    types: [model-performance-degraded, data-drift-detected]

env:
  PYTHON_VERSION: '3.9'
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
  MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
  
  # Azure App Service Names
  API_APP_NAME: 'oopsallaiapi'
  UI_APP_NAME: 'oopsallaiui'

jobs:
  check-retraining-triggers:
    name: Check Retraining Triggers
    runs-on: ubuntu-latest
    outputs:
      should_retrain: ${{ steps.check-triggers.outputs.should_retrain }}
      trigger_reason: ${{ steps.check-triggers.outputs.trigger_reason }}
      data_version: ${{ steps.check-triggers.outputs.data_version }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install mlflow azure-ai-ml azure-storage-blob pandas numpy scikit-learn requests
        
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Check retraining triggers
      id: check-triggers
      run: |
        python -c "
        import os
        import sys
        import json
        import requests
        from datetime import datetime, timedelta
        import pandas as pd
        
        # Initialize trigger flags
        should_retrain = False
        trigger_reasons = []
        
        # Check if force retrain is requested
        force_retrain = '${{ github.event.inputs.force_retrain }}' == 'true'
        if force_retrain:
            should_retrain = True
            trigger_reasons.append('Manual force retrain requested')
        
        # Check for repository dispatch events (performance degradation, data drift)
        if '${{ github.event_name }}' == 'repository_dispatch':
            should_retrain = True
            trigger_reasons.append(f'Repository dispatch: ${{ github.event.action }}')